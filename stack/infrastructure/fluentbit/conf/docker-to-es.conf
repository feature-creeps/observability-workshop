[SERVICE]
    Flush        5
    Daemon       Off
    Log_Level    trace
    Parsers_File parsers_custom.conf
    HTTP_Server  On
    HTTP_Listen  0.0.0.0
    HTTP_PORT    2020


# tcp input for testing+
# usage:
# echo '{"log": "\{\"message\":\"test message\"\}", "stream": "stdout", "time":""}' | nc 127.0.0.1 5170
# regular log:
# echo '{"stream": "stdout", "time":"2021-02-03T19:42:35.721375900Z","container_name":"/dima_imageholder_1","log": "{\"traceId\":\"601af05de69b0af256f07477a3903100\",\"spanId\":\"56f07477a3903100\",\"spanExportable\":\"true\",\"X-Span-Export\":\"true\",\"imageId\":\"vvyumm9tiqvih0ttemuh\",\"imageName\":\"unknown_7841855618\",\"X-B3-SpanId\":\"56f07477a3903100\",\"X-B3-TraceId\":\"601af05de69b0af256f07477a3903100\",\"mimeType\":\"image\/png\",\"event.id\":\"d74f68d3-311d-4981-96ac-9c17b33962be\",\"@timestamp\":\"2021-02-03T18:50:05.907+00:00\",\"message\":\"Returning random image with id vvyumm9tiqvih0ttemuh\",\"HOSTNAME\":\"89fb2866b14e\",\"logger_name\":\"com.github.olly.workshop.imageholder.adapter.ImageController\",\"level\":\"INFO\",\"service\":\"imageholder\"}"}' | nc 127.0.0.1 5170
# event log:
# echo '{"time":"2021-02-03T21:25:35.721375900Z","container_name":"/dima_imageholder_1","stream":"stdout","log": "{\"event.response_status\":\"200\",\"event.startedAt\":\"2021-02-03T18:53:24.658367\",\"event.request_cookies_sid\":\"Fe26_2__a802c120c3da7fc52347851b55597a010d9425a98c3fc9d313073a9032f7dbf3_37sW7TR4wFXTNcLANmVcig_BIptLIPZN1ShJoi9p0_VuHajqxZJFn7hHKTrcOm2F2cen2nEpP85hc5KeVFqRxfAdcXXxlQPleHoGtxj4c_jcbtNLF4LfFO3_RYnl_xeqdDbVc4WvHKmUCPBmknkmAd6LglihvOm4opWLcq7_syZ_ZHHI5XkJebqaejHao4X8631zzBw7Shf9cPmvLWT4sXA0MIEKeu4nuAIx7zJ3CTem7w23lp6bmyXYsuTrnE4yF4__ec666ee7a53b0dee4eb65705c14c954a7f4371b973a580825d821e253a43a842_NKK7YM_NrulDQ4nMZNjOewPguT4MrlLj4bM4vfzYwqI\",\"event.request_cookies_exist\":\"true\",\"event.request_header_accept-language\":\"en-GB,en-US;q=0.9,en;q=0.8\",\"event.response_header_imageId\":\"vvyumm9tiqvih0ttemuh\",\"mimeType\":\"image\/png\",\"event.exception_thrown\":\"false\",\"transaction.id\":\"6c07ef670383d4f3\",\"spanId\":\"2908a6f85110679d\",\"event.content_imageId\":\"vvyumm9tiqvih0ttemuh\",\"event.content_size\":\"309750\",\"event.response_header_Content-Type\":\"image\/png\",\"event.request_authType\":\"null\",\"X-B3-TraceId\":\"601af12486975ed02908a6f85110679d\",\"event.request_header_connection\":\"keep-alive\",\"event.request_header_sec-fetch-dest\":\"image\",\"event.request_requestUri\":\"\/api\/images\/random\",\"traceId\":\"601af12486975ed02908a6f85110679d\",\"spanExportable\":\"true\",\"imageId\":\"vvyumm9tiqvih0ttemuh\",\"imageName\":\"unknown_7841855618\",\"event.app_error\":\"0\",\"event.request_method\":\"GET\",\"event.request_pathInfo\":\"null\",\"event.request_servletPath\":\"\/api\/images\/random\",\"event.request_header_sec-gpc\":\"1\",\"event.request_header_accept-encoding\":\"gzip, deflate, br\",\"event.response_header_Content-Length\":\"309750\",\"event.request_header_host\":\"localhost:8081\",\"event.total_images\":\"1\",\"event.request_header_sec-fetch-site\":\"same-origin\",\"event.trigger\":\"HTTP\",\"event.request_header_cookie\":\"sid=Fe26.2**a802c120c3da7fc52347851b55597a010d9425a98c3fc9d313073a9032f7dbf3*37sW7TR4wFXTNcLANmVcig*BIptLIPZN1ShJoi9p0-VuHajqxZJFn7hHKTrcOm2F2cen2nEpP85hc5KeVFqRxfAdcXXxlQPleHoGtxj4c-jcbtNLF4LfFO3-RYnl-xeqdDbVc4WvHKmUCPBmknkmAd6LglihvOm4opWLcq7_syZ_ZHHI5XkJebqaejHao4X8631zzBw7Shf9cPmvLWT4sXA0MIEKeu4nuAIx7zJ3CTem7w23lp6bmyXYsuTrnE4yF4**ec666ee7a53b0dee4eb65705c14c954a7f4371b973a580825d821e253a43a842*NKK7YM_NrulDQ4nMZNjOewPguT4MrlLj4bM4vfzYwqI\",\"trace.id\":\"ee47d3dc74447724cae96ead8062edce\",\"event.request_header_referer\":\"http:\/\/localhost:8081\/displayRandom.html\",\"event.content_type\":\"image\/png\",\"event.request_header_user-agent\":\"Mozilla\/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/88.0.4324.96 Safari\/537.36\",\"X-Span-Export\":\"true\",\"event.request_requestedSessionId\":\"null\",\"event.request_header_sec-fetch-mode\":\"no-cors\",\"event.request_queryString\":\"null\",\"event.response_header_Connection\":\"keep-alive\",\"event.request_remoteUser\":\"null\",\"event.request_contextPath\":\"\",\"event.request_header_accept\":\"image\/avif,image\/webp,image\/apng,image\/svg+xml,image\/*,*\/*;q=0.8\",\"event.action\":\"random\",\"X-B3-SpanId\":\"2908a6f85110679d\",\"event.type\":\"event\",\"event.response_header_Date\":\"Wed, 03 Feb 2021 18:53:24 GMT\",\"event.response_header_Keep-Alive\":\"timeout=60\",\"event.id\":\"95592f83-499c-4619-914d-d75c478d6d23\",\"@timestamp\":\"2021-02-03T18:53:25.419+00:00\",\"message\":\"GET request to \/api\/images\/random\",\"HOSTNAME\":\"3bb717d7d382\",\"logger_name\":\"event\",\"level\":\"INFO\",\"tags\":[\"EVENT\"],\"service\":\"imageholder\"}"}' | nc 127.0.0.1 5170
[INPUT]
    Name        tcp
    Listen      0.0.0.0
    Port        5170
    Chunk_Size  32
    Buffer_Size 64
    Format      json

# receive all logs from docker via fluent-logdriver
# unfortunately there is no option to set the tag for the incoming events
# by default the tag is the container id which is a guid..
[INPUT]
    Name   forward
    Listen 0.0.0.0
    Port   24224

# ------------------------- docker.* tagging ------------------------- #
# we have to do this hack to prevent "endless loops" with the rewrite_tag
# plugin, as it would always match its own re-emitted records again and again

# add first_run=true if the key first_run does not exist yet
# that way it will match the  regex in the rewrite_tag plugin below
# and if will be tagged as docker.<container_name>
[FILTER]
    Name          modify
    Match         *
    Condition     Key_does_not_exist first_run
    Add           first_run true

## TESTING ##
[FILTER]
    name        expect
    match       *
    key_exists  first_run
    action      warn

# set the key first_run to false,
# if the tag was re-written to docker.* or later to domain.* and re-emitted
# that way it will be skipped in the rewrite_tag below on the second run
# and go through with the tag docker.<container_name> or domain.*.<service>
[FILTER]
    Name          modify
    Match         docker.*
    Set           first_run false
[FILTER]
    Name          modify
    Match         domain.*
    Set           first_run false
[FILTER]
    Name          modify
    Match         log.*
    Set           first_run false

## TESTING ##
[FILTER]
    name            expect
    match           docker.*
    key_val_eq      first_run   false
    action          warn
## TESTING ##
[FILTER]
    name            expect
    match           domain.*
    key_val_eq      first_run   false
    action          warn
## TESTING ##
[FILTER]
    name            expect
    match           log.*
    key_val_eq      first_run   false
    action          warn

# rewrite tag of all incoming logs based on the container name
# CAUTION:  the rewrite_tag plugin will re-emit the whole record from the beginning of the pipeline
#           which also includes re-re-writing the tag if it matches again
[FILTER]
    Name            rewrite_tag
    Match           *
    Rule            $first_run "true" docker.$container_name false

# ------------------------- generic ------------------------- #

# rename log field to message field
[FILTER]
    Name          modify
    Match         docker.*
    Hard_copy     log message

## TESTING ##
[FILTER]
    name        expect
    match       docker.*
    key_exists  message
    action      warn

# remove starting / from container name
[FILTER]
    Name            parser
    Match           docker.*
    Key_Name        container_name
    Parser          remove_slash_from_container_name
    Reserve_Data    true
    Preserve_Key    false

# write part of container name to service field
[FILTER]
    Name            parser
    Match           docker.*
    Key_Name        container_name
    Parser          service_from_container_name
    Reserve_Data    true
    Preserve_Key    false

## TESTING ##
[FILTER]
    name        expect
    match       docker.*
    key_exists  service
    action      warn

# ------------------------- split container logs ------------------------- #

## TESTING ##
[FILTER]
    name            expect
    match           domain.event.*
    key_val_eq      logger_name   event
    action          warn

# rewrite tags based on service name
# resulting in tags: domain.<service>, mongodb, frontend
# CAUTION:  the rewrite_tag plugin will re-emit the whole record from the beginning of the pipeline
#           which also includes re-rewriting the tag if it matches
[FILTER]
    Name            rewrite_tag
    Match           docker.*
    Rule            $service "^(image.+)$" domain.any.$service false
    Rule            $service "^(mongodb|frontend)$" log.$service false

# ------------------------- handle domain service logs ------------------------- #
# parse message field as json
[FILTER]
    Name            parser
    Parser          message_as_json
    Match           domain.any.*
    Key_Name        message
    Reserve_Data    true
    Preserve_Key    false

## TESTING ##
[FILTER]
    name            expect
    match           domain.any.*
    key_exists      logger_name
    action          warn

# ------------------------- split domain services' events ------------------------- #

# reroute image* services' events to domain.event.<service>
# field logger_name is set to event in case of event, others are set to the class
# CAUTION:  the rewrite_tag plugin will re-emit the whole record from the beginning of the pipeline
#           which also includes re-rewriting the tag if it matches
[FILTER]
    Name            rewrite_tag
    Match           domain.any.*
    Rule            $logger_name "event" domain.event.$service false
    Rule            $logger_name ".*" domain.log.$service false

# remove log field (it is either in message now or parsed)
[FILTER]
    Name          modify
    Match         *
    Remove        log

# just before the outputs, the first_run key is being removed
[FILTER]
    Name          modify
    Match         *
    Remove        first_run

# TODO: Add loki plugin https://grafana.com/docs/loki/latest/clients/fluentbit/

# multiple outputs for es defined
# a record will go through all outputs and will be published on every match
# eg, a record with tag domain.log.foo would be published twice, as well as domain.event.bar
# do not set a Type as it might conflict with the default type
[OUTPUT]
    Name                    es
    Match                   domain.log.*
    Host                    elasticsearch
    Port                    9200
    HTTP_User               elastic
    HTTP_Passwd             changeme
    Logstash_Prefix         logs
    Logstash_Format         true
    Logstash_DateFormat     %Y.%m.%d
    Include_Tag_Key         true

[OUTPUT]
    Name                    es
    Match                   domain.event.*
    Host                    elasticsearch
    Port                    9200
    HTTP_User               elastic
    HTTP_Passwd             changeme
    Logstash_Prefix         events
    Logstash_Format         true
    Logstash_DateFormat     %Y.%m.%d
    Include_Tag_Key         true

[OUTPUT]
    Name                    es
    Match                   *
    Host                    elasticsearch
    Port                    9200
    HTTP_User               elastic
    HTTP_Passwd             changeme
    Logstash_Prefix         catchall
    Logstash_Format         true
    Logstash_DateFormat     %Y.%m.%d
    Include_Tag_Key         true